/**
 * Weather-Cam-API (OpenAPI 3.0)
 *
 * Weather-Cam-API is a REST API created as a part a software project at Eötvös Loránd university. The goal of the project is to turn old/unused mobile phones and an [esp8266](https://www.espressif.com/en/products/socs/esp8266) into a diy weather stations capable of recording photos, temperature, pressure and humidity data. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.libapi.data.api

import com.example.libapi.data.entities.ApiResponseEntity
import com.example.libapi.data.entities.StationApiKeyEntity
import com.example.libapi.data.entities.StationEntity
import com.example.libapi.data.entities.UserEntity

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class UserApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(baseUrl, httpClientEngine, httpClientConfig) {

        /**
        * Add new stations to the user.
        * ## Functionality:  Adds a new station to the list of stations associated with the user.  __Important__: This response contains information about the newly added station and it&#39;s API key.  The API key is only recieved once after creating a new station make sure to __write it down__ somewhere! After this only parts of the API key can be accessed by the user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
         * @return StationApiKeyEntity
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun addStations(): HttpResponse<StationApiKeyEntity> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/stations",
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete user.
        * ## Functionality:  Deletes a user.  --- ### Prerequisites: - This endpoint can only be used with a valid JWT token. --- 
         * @param username The unique username of the user. 
         * @return ApiResponseEntity
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun deleteUser(username: kotlin.String): HttpResponse<ApiResponseEntity> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Returns an array of stations registered with the user.
        * ## Functionality:  Returns an array of stations associated with the user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
         * @return kotlin.collections.List<StationEntity>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getStations(): HttpResponse<kotlin.collections.List<StationEntity>> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/stations",
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Logs user into the system
        * ## Functionality:  Returns a JWT token. This token can later be used to authenticate requests.  --- 
         * @param username The unique username for the user. (optional)
         * @param password The password associated with the username. (optional)
         * @return ApiResponseEntity
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun loginUser(username: kotlin.String?, password: kotlin.String?): HttpResponse<ApiResponseEntity> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            username?.apply { localVariableQuery["username"] = listOf("$username") }
            password?.apply { localVariableQuery["password"] = listOf("$password") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/login",
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Logs out current logged in user.
        * ## Functionality:  Logs out current logged in user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
         * @return ApiResponseEntity
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun logoutUser(): HttpResponse<ApiResponseEntity> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/logout",
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Generate new API key for a station.
        * ## Functionality:  Generate new API key for a station. This can be used to revoke all access of a weather station.  __Important__: After a new API key is generated stations that use this API key lose access to upload measurements. If you want to continue using the weather station you need to update the API key in the mobile app.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
         * @param stationId station_id is a __unique__ identifier for weather stations  station_id follows the [uuid](https://en.wikipedia.org/wiki/Universally_unique_identifier) standard.  
         * @return StationApiKeyEntity
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun updateStation(stationId: java.util.UUID): HttpResponse<StationApiKeyEntity> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/stations/{station_id}".replace("{" + "station_id" + "}", "$stationId"),
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add new user.
        * ## Functionality:  Adds a new user to the server.  --- 
         * @param username The unique username of the new user (optional)
         * @param password The password of the new user (optional)
         * @return ApiResponseEntity
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun userRegisterPost(username: kotlin.String?, password: kotlin.String?): HttpResponse<ApiResponseEntity> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            username?.apply { localVariableQuery["username"] = listOf("$username") }
            password?.apply { localVariableQuery["password"] = listOf("$password") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/register",
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update user data.
        * ## Functionality:  Updates the data of an already existing user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
         * @param username The unique username of the user. 
         * @param userEntity **Important:**The user_id of the user cannot be updated with this endpoint.  (optional)
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun userUsernamePut(username: kotlin.String, userEntity: UserEntity?): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = userEntity

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
