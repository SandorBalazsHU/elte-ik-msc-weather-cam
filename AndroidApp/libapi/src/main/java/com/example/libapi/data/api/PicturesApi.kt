/**
 * Weather-Cam-API (OpenAPI 3.0)
 *
 * Weather-Cam-API is a REST API created as a part a software project at Eötvös Loránd university. The goal of the project is to turn old/unused mobile phones and an [esp8266](https://www.espressif.com/en/products/socs/esp8266) into a diy weather stations capable of recording photos, temperature, pressure and humidity data. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.libapi.data.api

import com.example.libapi.data.entities.ApiResponseEntity

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class PicturesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(baseUrl, httpClientEngine, httpClientConfig) {

        /**
        * Add picture to server.
        * ## Functionality:  Upload picture to the server.  --- ### Prerequisites:   - This endpoint can only be used with a valid API key. --- 
         * @param body Server 
         * @return ApiResponseEntity
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun addPicture(body: java.io.File): HttpResponse<ApiResponseEntity> {

            val localVariableAuthNames = listOf<String>("apiKeyAuth")

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/stations/pictures",
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Find last picture.
        * ## Functionality:  Returns the __latest__ picture recieved from the weather station.    *Note*: The latest picture is defined as the last picture of station with station_id processed by the server.   --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
         * @param stationId station_id is a __unique__ identifier for weather stations  station_id follows the [uuid](https://en.wikipedia.org/wiki/Universally_unique_identifier) standard.  
         * @return java.io.File
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getLastPicture(stationId: java.util.UUID): HttpResponse<java.io.File> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stations/{station_id}/pictures/latest".replace("{" + "station_id" + "}", "$stationId"),
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Find picture by id.
        * ## Functionality:    Returns a picture identified by picture_id of a station identified by station_id.        ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
         * @param pictureId  
         * @param stationId station_id is a __unique__ identifier for weather stations  station_id follows the [uuid](https://en.wikipedia.org/wiki/Universally_unique_identifier) standard.  
         * @return java.io.File
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPictureById(pictureId: java.util.UUID, stationId: java.util.UUID): HttpResponse<java.io.File> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stations/{station_id}/pictures/{picture_id}".replace("{" + "picture_id" + "}", "$pictureId").replace("{" + "station_id" + "}", "$stationId"),
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Find picture relative to other picture.
        * ## Functionality:  Returns a __single__ picture relative to an other picture.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
         * @param stationId station_id is a __unique__ identifier for weather stations  station_id follows the [uuid](https://en.wikipedia.org/wiki/Universally_unique_identifier) standard.  
         * @param pictureId picture_id is a __unique__ identifier for pictures.   picture_id follows the [uuid](https://en.wikipedia.org/wiki/Universally_unique_identifier) standard.  
         * @param offset offset is a signed integer this signed property of is used to calculate the returned picture. For more information see the table below:  | offset value | result | |---|---| | offset &lt; 0 | If a picture with picture_id exist than the picture abs(offset) __before__ picture_id is returned.   | | offset &gt; 0 | If a picture with picture_id exist than the picture abs(offset) __after__ picture_id is returned.   | | offset &#x3D; 0 | If a record with picture_id exist than the picture identified by picture_id is returned.   |  
         * @return java.io.File
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelativePicture(stationId: java.util.UUID, pictureId: java.util.UUID, offset: java.math.BigDecimal): HttpResponse<java.io.File> {

            val localVariableAuthNames = listOf<String>("bearerAuth")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            pictureId?.apply { localVariableQuery["picture_id"] = listOf("$pictureId") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stations/{station_id}/pictures".replace("{" + "station_id" + "}", "$stationId"),
            query = localVariableQuery,
            headers = localVariableHeaders
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
