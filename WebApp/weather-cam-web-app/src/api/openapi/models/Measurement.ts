/* tslint:disable */
/* eslint-disable */
/**
 * Weather-Cam-API (OpenAPI 3.0)
 * Weather-Cam-API is a REST API created as a part a software project at Eötvös Loránd university. The goal of the project is to turn old/unused mobile phones and an [esp8266](https://www.espressif.com/en/products/socs/esp8266) into a diy weather stations capable of recording photos, temperature, pressure and humidity data. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Measurement contains the data recorded by the sensors.
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * temperature in celsius.
     * @type {number}
     * @memberof Measurement
     */
    temperature?: number;
    /**
     * pressure in millibars.
     * @type {number}
     * @memberof Measurement
     */
    pressure?: number;
    /**
     * humidity in percentage.
     * @type {number}
     * @memberof Measurement
     */
    humidity?: number;
    /**
     * remaining battery in percentage
     * @type {number}
     * @memberof Measurement
     */
    battery?: number;
    /**
     * the time of recording the measurement
timestamp follows the [unix time](https://en.wikipedia.org/wiki/Unix_time) standard.

     * @type {number}
     * @memberof Measurement
     */
    timestamp?: number;
}

/**
 * Check if a given object implements the Measurement interface.
 */
export function instanceOfMeasurement(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MeasurementFromJSON(json: any): Measurement {
    return MeasurementFromJSONTyped(json, false);
}

export function MeasurementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Measurement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'pressure': !exists(json, 'pressure') ? undefined : json['pressure'],
        'humidity': !exists(json, 'humidity') ? undefined : json['humidity'],
        'battery': !exists(json, 'battery') ? undefined : json['battery'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
    };
}

export function MeasurementToJSON(value?: Measurement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'temperature': value.temperature,
        'pressure': value.pressure,
        'humidity': value.humidity,
        'battery': value.battery,
        'timestamp': value.timestamp,
    };
}

