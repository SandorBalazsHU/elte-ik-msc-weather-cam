/* tslint:disable */
/* eslint-disable */
/**
 * Weather-Cam-API (OpenAPI 3.0)
 * Weather-Cam-API is a REST API created as a part a software project at Eötvös Loránd university. The goal of the project is to turn old/unused mobile phones and an [esp8266](https://www.espressif.com/en/products/socs/esp8266) into a diy weather stations capable of recording photos, temperature, pressure and humidity data. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelApiResponse,
} from '../models';
import {
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models';

export interface AddPictureRequest {
    body: Blob;
}

export interface GetLastPictureRequest {
    stationId: number;
    relative: string;
}

export interface GetPictureByIdRequest {
    pictureId: number;
    stationId: number;
}

export interface GetRelativePictureRequest {
    stationId: number;
    pictureId: number;
    offset: number;
}

/**
 * 
 */
export class PicturesApi extends runtime.BaseAPI {

    /**
     * ## Functionality:  Upload picture to the server.  --- ### Prerequisites:   - This endpoint can only be used with a valid API key.    --- 
     * Add picture to server.
     */
    async addPictureRaw(requestParameters: AddPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addPicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'image/jpeg';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/stations/pictures`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * ## Functionality:  Upload picture to the server.  --- ### Prerequisites:   - This endpoint can only be used with a valid API key.    --- 
     * Add picture to server.
     */
    async addPicture(requestParameters: AddPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.addPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Returns the __latest or the first__ picture recieved from the weather station.   *Note*: The latest picture is defined as the last picture of station with station_id processed by the server.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Find last picture.
     */
    async getLastPictureRaw(requestParameters: GetLastPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling getLastPicture.');
        }

        if (requestParameters.relative === null || requestParameters.relative === undefined) {
            throw new runtime.RequiredError('relative','Required parameter requestParameters.relative was null or undefined when calling getLastPicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{station_id}/pictures/{relative}`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters.stationId))).replace(`{${"relative"}}`, encodeURIComponent(String(requestParameters.relative))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * ## Functionality:  Returns the __latest or the first__ picture recieved from the weather station.   *Note*: The latest picture is defined as the last picture of station with station_id processed by the server.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Find last picture.
     */
    async getLastPicture(requestParameters: GetLastPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getLastPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:    Returns a picture identified by picture_id of a station identified by station_id.      ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.      --- 
     * Find picture by id.
     */
    async getPictureByIdRaw(requestParameters: GetPictureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.pictureId === null || requestParameters.pictureId === undefined) {
            throw new runtime.RequiredError('pictureId','Required parameter requestParameters.pictureId was null or undefined when calling getPictureById.');
        }

        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling getPictureById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{station_id}/pictures/{picture_id}`.replace(`{${"picture_id"}}`, encodeURIComponent(String(requestParameters.pictureId))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * ## Functionality:    Returns a picture identified by picture_id of a station identified by station_id.      ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.      --- 
     * Find picture by id.
     */
    async getPictureById(requestParameters: GetPictureByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getPictureByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Returns a __single__ picture relative to an other picture.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Find picture relative to other picture.
     */
    async getRelativePictureRaw(requestParameters: GetRelativePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling getRelativePicture.');
        }

        if (requestParameters.pictureId === null || requestParameters.pictureId === undefined) {
            throw new runtime.RequiredError('pictureId','Required parameter requestParameters.pictureId was null or undefined when calling getRelativePicture.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getRelativePicture.');
        }

        const queryParameters: any = {};

        if (requestParameters.pictureId !== undefined) {
            queryParameters['picture_id'] = requestParameters.pictureId;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{station_id}/pictures`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * ## Functionality:  Returns a __single__ picture relative to an other picture.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Find picture relative to other picture.
     */
    async getRelativePicture(requestParameters: GetRelativePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getRelativePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
