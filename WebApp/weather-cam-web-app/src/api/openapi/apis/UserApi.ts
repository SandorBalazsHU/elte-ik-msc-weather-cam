/* tslint:disable */
/* eslint-disable */
/**
 * Weather-Cam-API (OpenAPI 3.0)
 * Weather-Cam-API is a REST API created as a part a software project at Eötvös Loránd university. The goal of the project is to turn old/unused mobile phones and an [esp8266](https://www.espressif.com/en/products/socs/esp8266) into a diy weather stations capable of recording photos, temperature, pressure and humidity data. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelApiResponse,
  Station,
  StationApiKey,
  User,
  UserUpdateable,
} from '../models';
import {
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    StationFromJSON,
    StationToJSON,
    StationApiKeyFromJSON,
    StationApiKeyToJSON,
    UserFromJSON,
    UserToJSON,
    UserUpdateableFromJSON,
    UserUpdateableToJSON,
} from '../models';

export interface AddStationsRequest {
    stationName: string;
}

export interface DeleteUserRequest {
    username: string;
}

export interface LoginUserRequest {
    username: string;
    password: string;
}

export interface RegisterUserRequest {
    username: string;
    password: string;
}

export interface UpdateStationRequest {
    stationId: string;
}

export interface UpdateUserRequest {
    username: string;
    userUpdateable?: UserUpdateable;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * ## Functionality:  Adds a new station to the list of stations associated with the user.  __Important__: This response contains information about the newly added station and it\'s API key.  The API key is only recieved once after creating a new station make sure to __write it down__ somewhere! After this only parts of the API key can be accessed by the user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
     * Add new stations to the user.
     */
    async addStationsRaw(requestParameters: AddStationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationApiKey>> {
        if (requestParameters.stationName === null || requestParameters.stationName === undefined) {
            throw new runtime.RequiredError('stationName','Required parameter requestParameters.stationName was null or undefined when calling addStations.');
        }

        const queryParameters: any = {};

        if (requestParameters.stationName !== undefined) {
            queryParameters['station_name'] = requestParameters.stationName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/stations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationApiKeyFromJSON(jsonValue));
    }

    /**
     * ## Functionality:  Adds a new station to the list of stations associated with the user.  __Important__: This response contains information about the newly added station and it\'s API key.  The API key is only recieved once after creating a new station make sure to __write it down__ somewhere! After this only parts of the API key can be accessed by the user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token. --- 
     * Add new stations to the user.
     */
    async addStations(requestParameters: AddStationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationApiKey> {
        const response = await this.addStationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Deletes a user.  --- ### Prerequisites: - This endpoint can only be used with a valid JWT token.  --- 
     * Delete user.
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * ## Functionality:  Deletes a user.  --- ### Prerequisites: - This endpoint can only be used with a valid JWT token.  --- 
     * Delete user.
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:    Returns data about the currently logged in user. This is useful when the JWT token is saved in the cookies.    ---  ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Gets data about the logged in user.
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * ## Functionality:    Returns data about the currently logged in user. This is useful when the JWT token is saved in the cookies.    ---  ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Gets data about the logged in user.
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Returns an array of stations associated with the user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Returns an array of stations registered with the user.
     */
    async getStationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Station>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/stations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StationFromJSON));
    }

    /**
     * ## Functionality:  Returns an array of stations associated with the user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Returns an array of stations registered with the user.
     */
    async getStations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Station>> {
        const response = await this.getStationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:    Returns a JWT token. This token can later be used to authenticate requests.    --- 
     * Logs user into the system
     */
    async loginUserRaw(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling loginUser.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * ## Functionality:    Returns a JWT token. This token can later be used to authenticate requests.    --- 
     * Logs user into the system
     */
    async loginUser(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Logs out current logged in user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Logs out current logged in user.
     */
    async logoutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * ## Functionality:  Logs out current logged in user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Logs out current logged in user.
     */
    async logoutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.logoutUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Adds a new user to the server.  --- 
     * Add new user.
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling registerUser.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling registerUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * ## Functionality:  Adds a new user to the server.  --- 
     * Add new user.
     */
    async registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.registerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Generate new API key for a station. This can be used to revoke all access of a weather station.  __Important__: After a new API key is generated stations that use this API key lose access to upload measurements. If you want to continue using the weather station you need to update the API key in the mobile app.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Generate new API key for a station.
     */
    async updateStationRaw(requestParameters: UpdateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling updateStation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/stations/{station_id}`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ## Functionality:  Generate new API key for a station. This can be used to revoke all access of a weather station.  __Important__: After a new API key is generated stations that use this API key lose access to upload measurements. If you want to continue using the weather station you need to update the API key in the mobile app.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Generate new API key for a station.
     */
    async updateStation(requestParameters: UpdateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.updateStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:  Updates the data of an already existing user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Update user data.
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateableToJSON(requestParameters.userUpdateable),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ## Functionality:  Updates the data of an already existing user.  --- ### Prerequisites:   - This endpoint can only be used with a valid JWT token.    --- 
     * Update user data.
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
