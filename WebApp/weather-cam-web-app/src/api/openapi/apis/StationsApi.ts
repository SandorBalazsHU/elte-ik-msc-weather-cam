/* tslint:disable */
/* eslint-disable */
/**
 * Weather-Cam-API (OpenAPI 3.0)
 * Weather-Cam-API is a REST API created as a part a software project at Eötvös Loránd university. The goal of the project is to turn old/unused mobile phones and an [esp8266](https://www.espressif.com/en/products/socs/esp8266) into a diy weather stations capable of recording photos, temperature, pressure and humidity data. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelApiResponse,
  StorageInfo,
} from '../models';
import {
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    StorageInfoFromJSON,
    StorageInfoToJSON,
} from '../models';

export interface GetPartialApiKeyRequest {
    stationId: string;
}

export interface GetStationStatusRequest {
    stationId: string;
}

export interface UpdateStationStatusRequest {
    statusCode: number;
}

/**
 * 
 */
export class StationsApi extends runtime.BaseAPI {

    /**
     * ## Functionality:    Returns information about the storage server for the pictures.         ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Returns information about the storage server for the measurements.
     */
    async getMeasurementStorageInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/measurements/storage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageInfoFromJSON(jsonValue));
    }

    /**
     * ## Functionality:    Returns information about the storage server for the pictures.         ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Returns information about the storage server for the measurements.
     */
    async getMeasurementStorageInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageInfo> {
        const response = await this.getMeasurementStorageInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:    Returns the API key of the station identified by station_id with only the first 4 and last 4 characters visible. Every other character is replaced by an \'X\' character         ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Returns part of the API key for a station.
     */
    async getPartialApiKeyRaw(requestParameters: GetPartialApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling getPartialApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{station_id}/api`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * ## Functionality:    Returns the API key of the station identified by station_id with only the first 4 and last 4 characters visible. Every other character is replaced by an \'X\' character         ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Returns part of the API key for a station.
     */
    async getPartialApiKey(requestParameters: GetPartialApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getPartialApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:    Returns information about the storage server for the pictures.         ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Returns information about the storage server for the pictures.
     */
    async getPictureStorageInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/pictures/storage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageInfoFromJSON(jsonValue));
    }

    /**
     * ## Functionality:    Returns information about the storage server for the pictures.         ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Returns information about the storage server for the pictures.
     */
    async getPictureStorageInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageInfo> {
        const response = await this.getPictureStorageInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:    Returns the status of a __single__ weather station.       ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Pings the weather station.
     */
    async getStationStatusRaw(requestParameters: GetStationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling getStationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{station_id}/ping`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * ## Functionality:    Returns the status of a __single__ weather station.       ---   ### Prerequisites:   - This endpoint can only be used with a valid JWT token.   --- 
     * Pings the weather station.
     */
    async getStationStatus(requestParameters: GetStationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.getStationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ## Functionality:    Updates the status of the weather station.         ---   ### Prerequisites:   - This endpoint can only be used with a valid API key.   --- 
     * Update the status of the weather station.
     */
    async updateStationStatusRaw(requestParameters: UpdateStationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.statusCode === null || requestParameters.statusCode === undefined) {
            throw new runtime.RequiredError('statusCode','Required parameter requestParameters.statusCode was null or undefined when calling updateStationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/stations/status/{status_code}`.replace(`{${"status_code"}}`, encodeURIComponent(String(requestParameters.statusCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * ## Functionality:    Updates the status of the weather station.         ---   ### Prerequisites:   - This endpoint can only be used with a valid API key.   --- 
     * Update the status of the weather station.
     */
    async updateStationStatus(requestParameters: UpdateStationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.updateStationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
